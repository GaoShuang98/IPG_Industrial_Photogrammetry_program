#! /usr/bin/env python
#  -*- coding: utf-8 -*-

# GUI module generated by PAGE version 5.4
#  in conjunction with Tcl version 8.6
#    Jul 22, 2020 09:43:00 PM CST  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import IPG_GUI_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1(root)
    IPG_GUI_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel(root)
    top = Toplevel1(w)
    IPG_GUI_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=[('selected', _compcolor), ('active', _ana2color)])

        top.geometry("1379x850")
        top.minsize(152, 1)
        top.maxsize(1924, 1030)
        top.resizable(1, 1)
        top.title("工业摄影测量程序")
        top.configure(background="#b1bccd")

        self.menubar = tk.Menu(top, font="TkMenuFont", bg=_bgcolor, fg=_fgcolor)
        top.configure(menu=self.menubar)

        self.sub_menu = tk.Menu(top,
                activebackground="#ececec",
                activeborderwidth=1,
                activeforeground="#000000",
                background="#d9d9d9",
                borderwidth=1,
                disabledforeground="#a3a3a3",
                foreground="#000000",
                tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu,
                label="文件")
        self.sub_menu.add_command(
                label="新建")
        self.sub_menu.add_command(
                command=IPG_GUI_support.open_file,
                label="打开")
        self.sub_menu1 = tk.Menu(top,
                activebackground="#ececec",
                activeborderwidth=1,
                activeforeground="#000000",
                background="#d9d9d9",
                borderwidth=1,
                disabledforeground="#a3a3a3",
                foreground="#000000",
                tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu1, label="处理")
        self.sub_menu1.add_command(command=IPG_GUI_support.auto_processing, label="自动测量")
        self.sub_menu1.add_command(command=IPG_GUI_support.bundle_adjustment, label="光束法平差")
        self.sub_menu1.add_command(command=IPG_GUI_support.bundle_adjustment_results, label="平差结果")
        self.sub_menu1.add_command(command=IPG_GUI_support.scan_setting, label="扫描设置")
        self.sub_menu1.add_command(command=IPG_GUI_support.match_setting, label="匹配设置")
        self.sub_menu1.add_command(command=IPG_GUI_support.bundle_adjustment_setting, label="平差设置")
        self.sub_menu1.add_command(command=IPG_GUI_support.export_all_img_points, label="导出所有像点坐标")
        self.sub_menu1.entryconfig(6, state='disabled')  # 使’导出所有像点坐标选项‘变灰、无法点击

        self.Canvas1 = tk.Canvas(top)
        self.Canvas1.place(relx=0.217, rely=0.0, relheight=0.782, relwidth=0.778)

        self.Canvas1.configure(background="#d9d9d9")
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(insertbackground="black")
        self.Canvas1.configure(relief="ridge")
        self.Canvas1.configure(selectbackground="blue")
        self.Canvas1.configure(selectforeground="white")

        self.menu = tk.Menu(root, tearoff=0)
        self.menu.add_command(label="扫描图像", command=IPG_GUI_support.scan_single_img)
        self.menu.add_command(label='像点畸变纠正', command=IPG_GUI_support.draw_corrected_img_point)
        self.menu.add_command(label='导出像点坐标', command=IPG_GUI_support.export_img_points)
        self.menu.add_command(label="图像重置", command=IPG_GUI_support.clear_canvas_point)
        def popupmenu(event):
            self.menu.post(event.x_root, event.y_root)
        self.Canvas1.bind("<Button-3>", popupmenu)
        self.menu.entryconfig(0, state='disabled')
        self.menu.entryconfig(1, state='disabled')
        self.menu.entryconfig(2, state='disabled')
        self.menu.entryconfig(3, state='disabled')
        # self.Canvas1.bind('<MouseWheel>', IPG_GUI_support.wheel_zoomer)


        self.Scrolledtext1 = ScrolledText(top)
        self.Scrolledtext1.place(relx=0.123, rely=0.788, relheight=0.21
                , relwidth=0.876)
        self.Scrolledtext1.configure(background="white")
        self.Scrolledtext1.configure(font="TkTextFont")
        self.Scrolledtext1.configure(foreground="black")
        self.Scrolledtext1.configure(highlightbackground="#d9d9d9")
        self.Scrolledtext1.configure(highlightcolor="black")
        self.Scrolledtext1.configure(insertbackground="black")
        self.Scrolledtext1.configure(insertborderwidth="3")
        self.Scrolledtext1.configure(selectbackground="blue")
        self.Scrolledtext1.configure(selectforeground="white")
        self.Scrolledtext1.configure(wrap="none")

        self.import_imgs = ttk.Button(top)
        self.import_imgs.place(relx=0.022, rely=0.071,  relheight=0.04
                , relwidth=0.075)
        self.import_imgs.configure(command=IPG_GUI_support.import_imgs)
        self.import_imgs.configure(takefocus="")
        self.import_imgs.configure(text='''导入图像''')
        self.import_imgs.configure(cursor="hand2")

        self.import_camera = ttk.Button(top)
        self.import_camera.place(relx=0.022, rely=0.129, relheight=0.04
                , relwidth=0.075)
        self.import_camera.configure(command=IPG_GUI_support.import_camera)
        self.import_camera.configure(takefocus="")
        self.import_camera.configure(text='''导入相机文件''')
        self.import_camera.configure(cursor="hand2")

        self.scan_imgs_button = ttk.Button(top)
        self.scan_imgs_button.place(relx=0.022, rely=0.188,  relheight=0.04, relwidth=0.075)

        self.scan_imgs_button.configure(command=IPG_GUI_support.scan_all_imgs)
        self.scan_imgs_button.configure(takefocus="")
        self.scan_imgs_button.configure(text='''扫描所有图像''')
        self.scan_imgs_button.configure(cursor="hand2")

        self.orentation_button = ttk.Button(top)
        self.orentation_button.place(relx=0.022, rely=0.247,  relheight=0.04, relwidth=0.075)
        self.orentation_button.configure(command=IPG_GUI_support.orentation)
        self.orentation_button.configure(takefocus="")
        self.orentation_button.configure(text='''定向''')
        self.orentation_button.configure(cursor="hand2")

        self.match_button = ttk.Button(top)
        self.match_button.place(relx=0.022, rely=0.306, relheight=0.04, relwidth=0.075)
        self.match_button.configure(command=IPG_GUI_support.match_points)
        self.match_button.configure(takefocus="")
        self.match_button.configure(text='''像点匹配''')
        self.match_button.configure(cursor="hand2")

        self.bundle_adjustment_button = ttk.Button(top)
        self.bundle_adjustment_button.place(relx=0.022, rely=0.365, relheight=0.04, relwidth=0.075)
        self.bundle_adjustment_button.configure(takefocus="")
        self.bundle_adjustment_button.configure(text='''光束法平差''')
        self.bundle_adjustment_button.configure(cursor="hand2")

        self.display_3d_data_button = ttk.Button(top)
        self.display_3d_data_button.place(relx=0.022, rely=0.424, relheight=0.04, relwidth=0.075)
        self.display_3d_data_button.configure(command=IPG_GUI_support.display_3d_data)
        self.display_3d_data_button.configure(takefocus="")
        self.display_3d_data_button.configure(text='''三维数据.暂需导入''')
        self.display_3d_data_button.configure(cursor="hand2")

        self.img_list = ScrolledListBox(top)
        self.img_list.place(relx=0.124, rely=0.0, relheight=0.787, relwidth=0.093)
        self.img_list.configure(background='white')
        self.img_list.configure(disabledforeground="#a3a3a3")
        self.img_list.configure(font="TkFixedFont")
        self.img_list.configure(highlightbackground="#d9d9d9")
        self.img_list.configure(selectbackground="blue")
        self.img_list.configure(selectforeground="white")
        self.img_list.bind('<Double-Button-1>', IPG_GUI_support.list_box_click)  # 绑定listbox的双击事件




# The following code is added to facilitate the Scrolled widgets you specified（指定、规定、详细说明）.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod  # （静态方法）
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)


class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Listbox widget with scrollbars that will
    automatically show/hide as needed.'''

    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)
    def size_(self):
        sz = tk.Listbox.size(self)
        return sz

import platform


def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





